{"version":3,"sources":["components/base-map.tsx","config/index.ts","components/top-nav.tsx","components/app-container.tsx","index.tsx"],"names":["initialViewState","bearing","latitude","longitude","pitch","zoom","BaseMap","useState","features","type","data","setData","cursor","setCursor","setMode","selectedFeatureIndexes","setSelectedFeatureIndexes","useEffect","selectedFeature","geo","geometry","console","log","Geometry","parseGeoJSON","toWkt","layers","event","this","isFeaturePicked","picks","selectedIndexes","map","pick","index","props","mode","length","filter","object","EditableGeoJsonLayer","getFillColor","_","isSelected","getLineColor","getLineDashArray","getTentativeLineColor","id","DrawPolygonMode","onEdit","updatedData","controller","getCursor","width","height","mapboxApiAccessToken","TopNavContainer","styled","div","Logo","a","TopNav","href","ScrollableContainer","AppContainer","ReactDOM","render","document","getElementById"],"mappings":"oXAwBMA,EAAmB,CACvBC,QAAS,EACTC,SAAU,QACVC,WAAY,UACZC,MAAO,EACPC,KAAM,IAgGOC,EA7FC,WAAO,IAAD,EACIC,mBAAS,CAC/BC,SAAU,GACVC,KAAM,sBAHY,mBACbC,EADa,KACPC,EADO,OAKQJ,mBAAiB,cALzB,mBAKbK,EALa,KAKLC,EALK,OAMIN,mBAAiB,eANrB,mBAMPO,GANO,aAOwCP,mBAE1D,IATkB,mBAObQ,EAPa,KAOWC,EAPX,KAWpBC,qBAAU,WACR,IAAMC,EAAuBR,EAAKF,SAASO,EAAuB,IAC5DI,EAAMD,EAAkBA,EAAgBE,SAAW,KACrDD,IACFE,QAAQC,IAAIH,GACZE,QAAQC,IAAIC,WAASC,aAAaL,GAAKM,YAExC,CAACV,EAAwBL,EAAKF,WAlBb,IA0DdkB,EAAS,CACb,IA3DkB,2KAqBEC,GAClB,GAAIC,KAAKC,gBAAgBF,EAAMG,OAAQ,CACrC,IAAMC,EAAkBJ,EAAMG,MAAME,KAAI,SAACC,GAAD,OAAUA,EAAKC,SACvDlB,EAA0Be,GAC1BlB,EAAU,cACNe,KAAKO,MAAMC,UAIXrB,EAAuBsB,QACzBrB,EAA0B,IAE5BF,EAAQ,eAEV,oEAAmBa,KAnCH,oCAsCGA,GAAa,IACxBG,EAAUH,EAAVG,MACDG,EAFwB,YAEhBH,EAFgB,MAG3BG,GAAQA,EAAKC,QAAUnB,EAAuB,GAChDF,EAAU,cAEVA,EAAU,QAEZ,qEAAoBc,KA9CJ,sCAiDMG,GACtB,QAAKA,EAAMO,QAGJP,EAAMQ,QAAO,SAACL,GAAD,MAAqC,YAArBA,EAAKM,OAAO9B,QAC7C4B,WAtDa,GAoBqBG,wBAuCvC,CAA+B,CAE7B9B,OACA+B,aAAc,SAACC,EAAQC,GAAT,OACZA,EAAa,CAAC,IAAK,EAAG,EAAG,KAAO,CAAC,EAAG,EAAG,EAAG,MAC5CC,aAAc,SAACF,EAAQC,GAAT,OACZA,EAAa,CAAC,IAAK,EAAG,EAAG,KAAO,CAAC,EAAG,EAAG,EAAG,MAC5CE,iBAAkB,iBAAM,CAAC,EAAG,IAC5BC,sBAAuB,iBAAM,CAAC,GAAI,EAAG,EAAG,MACxCC,GAAI,0BACJX,KAAMY,kBACNC,OAAQ,gBAAGC,EAAH,EAAGA,YAAH,OAA0BvC,EAAQuC,IAC1CnC,4BAIJ,OACE,kBAAC,IAAD,CACEf,iBAAkBA,EAClBmD,YAAY,EACZzB,OAAQA,EACR0B,UAAW,kBAAMxC,GACjByC,MAAO,OACPC,OAAQ,QAER,kBAAC,IAAD,CACEC,qBCpHN,6FDqHMF,MAAO,EACPC,OAAQ,M,4iBEnHhB,IAAME,EAAkBC,IAAOC,IAAV,KAafC,EAAOF,IAAOG,EAAV,KAqBKC,GAbSJ,IAAOG,EAAV,KAIN,kBACb,kBAACJ,EAAD,KACE,kBAACG,EAAD,CAAMG,KAAK,KAAX,gB,4FC1BJ,IAAMC,EAAsBN,IAAOC,IAAV,KAWVM,EAPM,kBACnB,kBAACD,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,OCPJE,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,W","file":"static/js/main.0501e7b8.chunk.js","sourcesContent":["import DeckGL from \"@deck.gl/react\";\n\nimport { EditableGeoJsonLayer } from \"@nebula.gl/layers\";\nimport { DrawPolygonMode, GeoJsonEditMode } from \"@nebula.gl/edit-modes\";\nimport React, { useEffect, useState } from \"react\";\nimport { StaticMap } from \"react-map-gl\";\nimport { Geometry } from \"wkx\";\nimport { PUBLIC_MAPBOX_TOKEN } from \"../config\";\n\nexport type ScreenCoords = [number, number];\nexport type Position = [number, number] | [number, number, number];\ninterface Pick {\n  object: any;\n  index: number;\n  isGuide: boolean;\n}\n\ninterface LayerEvent {\n  picks: Pick[];\n  screenCoords: ScreenCoords;\n  mapCoords: Position;\n  sourceEvent: any;\n}\n\nconst initialViewState = {\n  bearing: 0,\n  latitude: 37.7853,\n  longitude: -122.41669,\n  pitch: 0,\n  zoom: 11,\n};\n\nconst BaseMap = () => {\n  const [data, setData] = useState({\n    features: [],\n    type: \"FeatureCollection\",\n  });\n  const [cursor, setCursor] = useState<string>(\"all-scroll\");\n  const [mode, setMode] = useState<string>(\"drawPolygon\");\n  const [selectedFeatureIndexes, setSelectedFeatureIndexes] = useState<\n    Array<number>\n  >([]);\n\n  useEffect(() => {\n    const selectedFeature: any = data.features[selectedFeatureIndexes[0]];\n    const geo = selectedFeature ? selectedFeature.geometry : null;\n    if (geo) {\n      console.log(geo);\n      console.log(Geometry.parseGeoJSON(geo).toWkt());\n    }\n  }, [selectedFeatureIndexes, data.features]);\n\n  class CustomEditableGeoJsonLayer extends EditableGeoJsonLayer {\n    public onLayerClick(event: LayerEvent) {\n      if (this.isFeaturePicked(event.picks)) {\n        const selectedIndexes = event.picks.map((pick) => pick.index);\n        setSelectedFeatureIndexes(selectedIndexes);\n        setCursor(\"all-scroll\");\n        if (this.props.mode !== \"translate\") {\n          // setMode(\"translate\");\n        }\n      } else {\n        if (selectedFeatureIndexes.length) {\n          setSelectedFeatureIndexes([]);\n        }\n        setMode(\"drawPolygon\");\n      }\n      super.onLayerClick(event);\n    }\n\n    public onPointerMove(event: any) {\n      const { picks } = event;\n      const [pick] = picks;\n      if (pick && pick.index === selectedFeatureIndexes[0]) {\n        setCursor(\"all-scroll\");\n      } else {\n        setCursor(\"grab\");\n      }\n      super.onPointerMove(event);\n    }\n\n    private isFeaturePicked(picks: Array<Pick>) {\n      if (!picks.length) {\n        return false;\n      }\n      return picks.filter((pick: Pick) => pick.object.type === \"Feature\")\n        .length;\n    }\n  }\n\n  const layers = [\n    new CustomEditableGeoJsonLayer({\n      //@ts-ignore\n      data,\n      getFillColor: (_: any, isSelected: boolean) =>\n        isSelected ? [255, 0, 0, 150] : [0, 0, 0, 150],\n      getLineColor: (_: any, isSelected: boolean) =>\n        isSelected ? [200, 0, 0, 255] : [0, 0, 0, 255],\n      getLineDashArray: () => [0, 0],\n      getTentativeLineColor: () => [10, 0, 0, 200],\n      id: \"selected-features-layer\",\n      mode: DrawPolygonMode,\n      onEdit: ({ updatedData }: any) => setData(updatedData),\n      selectedFeatureIndexes,\n    }),\n  ];\n\n  return (\n    <DeckGL\n      initialViewState={initialViewState}\n      controller={true}\n      layers={layers}\n      getCursor={() => cursor}\n      width={\"100%\"}\n      height={\"100%\"}\n    >\n      <StaticMap\n        mapboxApiAccessToken={PUBLIC_MAPBOX_TOKEN}\n        width={0}\n        height={0}\n      />\n    </DeckGL>\n  );\n};\n\nexport default BaseMap;\n","export const PUBLIC_MAPBOX_TOKEN =\n  'pk.eyJ1Ijoic3RpbmxhbmciLCJhIjoiY2swOTdkemY4MDV0cDNjcGM0bnVoZG02NSJ9.yQ1GB5APWkDLz_JIBEAw5A';\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport GithubIcon from \"./icons/github\";\n\nconst TopNavContainer = styled.div`\n  position: fixed;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  z-index: 10000;\n  width: 100vw;\n  top: 0;\n  height: 60px;\n  background-color: #1c2230;\n`;\n\nconst Logo = styled.a`\n  color: white;\n  text-decoration: none;\n  font-size: 30px;\n  padding: 10px 0;\n  margin: 0 100px;\n`;\n\nconst GithubIconStyle = styled.a`\n  margin: 5px 50px 0 0;\n`;\n\nconst TopNav = () => (\n  <TopNavContainer>\n    <Logo href=\"/\">Geofencer</Logo>\n    {/* <GithubIconStyle href=\"https://github.com/themadarchitect/geofence\">\n      <GithubIcon size=\"10\" />\n    </GithubIconStyle> */}\n  </TopNavContainer>\n);\n\nexport default TopNav;\n","import React from 'react';\nimport styled from 'styled-components';\nimport BaseMap from './base-map';\nimport TopNav from './top-nav';\n\nconst ScrollableContainer = styled.div`\n  overflow: scroll;\n`;\n\nconst AppContainer = () => (\n  <ScrollableContainer>\n    <TopNav />\n    <BaseMap />\n  </ScrollableContainer>\n);\n\nexport default AppContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppContainer from './components/app-container';\nimport './static/index.css';\n\nReactDOM.render(<AppContainer />, document.getElementById('root'));\n"],"sourceRoot":""}